syntax = "proto3";

import "codes.proto";

// gRPC protocol for a blockchain node
package iohk.chain.node;

// Request message for method Tip.
message TipRequest {}

// Response message for method Tip.
message TipResponse {
    // Serialized content of the tip block header.
    bytes block_header = 1;
}

// Request to fetch the methods for blocks and headers.
message BlockIds {
    // The identifiers of blocks for loading.
    repeated bytes id = 1;
}

// Request to fetch the methods for blocks and headers.
message TransactionIds {
    // The identifiers of blocks for loading.
    repeated bytes id = 1;
}

// Identifier of the single transaction.
message TransactionId {
    bytes id = 1;
}

// Request message for method PullBlocksToTip.
message PullBlocksToTipRequest {
    // The identifiers of blocks to consider as the
    // starting point, in order of appearance.
    repeated bytes from = 1;
}

// Representation of a block.
message Block {
    // The serialized content of the block.
    bytes content = 1;
}

// Representation of a block header.
message Header {
    // The serialized content of the block header.
    bytes content = 1;
}

// Representation of a transaction.
message Transaction {
    // The serialized content of the transaction.
    bytes content = 1;
}

// Request message for method SubscribeToBlocks.
message BlockSubscriptionRequest {}

// Request message for method ProposeTransactions.
message ProposeTransactionsRequest {
    // Identifiers of transactions to check.
    repeated bytes ids = 1;
}

// Response message for method ProposeTransactions.
message ProposeTransactionsResponse {
    message Item {
        // Identifier of the transaction.
        bytes id = 1;
        // Status showing whether the transaction is known to the node.
        codes.TransactionStatus status = 2;
    }

    // Information on the transactions identified in the request.
    // The items shall be in the same order as the `ids` fields in the
    // ProposeTransactionsRequest message.
    repeated Item items = 1;
}

// Request message for method RecordTransaction.
message RecordTransactionRequest {
    // The serialized transaction content.
    bytes transaction = 1;
}

// Response message for the RecordTransaction method.
message RecordTransactionResponse {
    // The result of processing the transaction by the node.
    codes.TransactionAcceptance result = 1;
    // The ID of the transaction, when successful (result < 100)
    bytes id = 2;
}


// Gossip message.
message GossipMessage {
    message NodeId {
      bytes content = 1;
    }

    NodeId node_id = 1;
    bytes content = 2;
}

message Confirmation {}

service Node {
    rpc Tip (TipRequest) returns (TipResponse);
    rpc GetBlocks (BlockIds) returns (stream Block) {
        option idempotency_level = NO_SIDE_EFFECTS;
    }
    rpc GetHeaders (BlockIds) returns (stream Header) {
        option idempotency_level = NO_SIDE_EFFECTS;
    }
    rpc Transactions (TransactionIds) returns (stream Transaction) {
        option idempotency_level = NO_SIDE_EFFECTS;
    }

    // Establishes a subscription stream to receive information on new
    // blocks created or accepted by the peer.
    rpc SubscribeToBlocks (BlockSubscriptionRequest) returns (stream Header);

    rpc PullBlocksToTip (PullBlocksToTipRequest) returns (stream Block);
    rpc ProposeTransactions (ProposeTransactionsRequest) returns (ProposeTransactionsResponse);
    rpc RecordTransaction (RecordTransactionRequest) returns (RecordTransactionResponse);

    rpc Gossip (GossipMessage) returns (GossipMessage);
    rpc AnnounceBlock (Header) returns (Confirmation);
}
