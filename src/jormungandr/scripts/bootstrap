#!/bin/sh
#
# The script creates a bft or genesis configuration with 1 faucet with a hardcoded amount
#
# See help (-h) for synopsis
#

### CONFIGURATION

CLI=jcli
NODE=jormungandr
COLORS=1
REST_PREFIX="api"
REST_HOST="127.0.0.1"
REST_PORT="8443"

FAUCET_AMOUNT=1000000000
ADDRTYPE="--testing"

CONSENSUS="genesis"

while getopts 'bgp:h' c
do
    case $c in
        b) CONSENSUS="bft" ;;
        g) CONSENSUS="genesis" ;;
        p) REST_PORT="$OPTARG" ;;
        h)
            echo "usage: $0 [-p <REST_PORT>] [-b] [g]"
            echo ""
            echo "  -p <REST_PORT>   REST PORT for the service to listen on"
            echo "  -b               Use BFT consensus mode"
            echo "  -g               Use Genesis-praos consensus mode"
            exit 0
            ;;
    esac
done

[ -n "${REST_PORT}" ] && [ "${REST_PORT}" -eq "${REST_PORT}" ] 2>/dev/null
if [ $? -ne 0 ]; then
    echo "error: ${REST_PORT} is not valid number"
    exit 1
fi

REST_DEST="${REST_HOST}:${REST_PORT}"

### COLORS
if [ ${COLORS} -eq 1 ]; then
    GREEN=`printf "\033[0;32m"`
    RED=`printf "\033[0;31m"`
    BLUE=`printf "\033[0;33m"`
    WHITE=`printf "\033[0m"`
else
    GREEN=""
    RED=""
    BLUE=""
    WHITE=""
fi


echo "########################################################"
echo ""
echo "* Consensus: ${RED}${CONSENSUS}${WHITE}"
echo "* REST Port: ${RED}${REST_PORT}${WHITE}"
echo ""
echo "########################################################"
echo ""

### MAKE EVERYTHING

# faucet
FAUCET_SK=$($CLI key generate --type=Ed25519Extended)
FAUCET_PK=$(echo ${FAUCET_SK} | $CLI key to-public)
FAUCET_ADDR=$($CLI address account ${ADDRTYPE} ${FAUCET_PK})

# leader
LEADER_SK=$($CLI key generate --type=Ed25519)
LEADER_PK=$(echo ${LEADER_SK} | $CLI key to-public)

# stake pool
POOL_VRF_SK=$($CLI key generate --type=Curve25519_2HashDH)
POOL_KES_SK=$($CLI key generate --type=SumEd25519_12)

POOL_VRF_PK=$(echo ${POOL_VRF_SK} | $CLI key to-public)
POOL_KES_PK=$(echo ${POOL_KES_SK} | $CLI key to-public)

# note we use the faucet as the owner to this pool
STAKE_KEY=${FAUCET_SK}
STAKE_KEY_PUB=${FAUCET_PK}

echo ${STAKE_KEY} > stake_key.sk
echo ${POOL_VRF_SK} > stake_pool.vrf.sk
echo ${POOL_KES_SK} > stake_pool.kes.sk

$CLI certificate new stake-pool-registration \
    --kes-key ${POOL_KES_PK} \
    --vrf-key ${POOL_VRF_PK} \
    --serial 1010101010 > stake_pool.cert

cat stake_pool.cert | $CLI certificate sign stake_key.sk > stake_pool.signcert

STAKE_POOL_ID=$(cat stake_pool.signcert | $CLI certificate get-stake-pool-id)
STAKE_POOL_CERT=$(cat stake_pool.signcert)

$CLI certificate new stake-delegation \
    ${STAKE_POOL_ID} \
    ${STAKE_KEY_PUB} > stake_delegation.cert
cat stake_delegation.cert | $CLI certificate sign stake_key.sk > stake_delegation.signcert
STAKE_DELEGATION_CERT=$(cat stake_delegation.signcert)


cat << EOF > genesis.yaml
blockchain_configuration:
  block0_date: $(date +%s)
  discrimination: test
  slots_per_epoch: 5000
  slot_duration: 10
  epoch_stability_depth: 10
  consensus_genesis_praos_active_slot_coeff: 0.1
  consensus_leader_ids:
    - ${LEADER_PK}
  linear_fees:
    constant: 10
    coefficient: 0
    certificate: 0
  block0_consensus: ${CONSENSUS}
  bft_slots_ratio: 0
  kes_update_speed: 43200 # 12hours
initial_certs:
  - ${STAKE_POOL_CERT}
  - ${STAKE_DELEGATION_CERT}
initial_funds:
  - address: ${FAUCET_ADDR}
    value: ${FAUCET_AMOUNT}
EOF

cat << EOF > pool-secret1.yaml
genesis:
  sig_key: ${POOL_KES_SK}
  vrf_key: ${POOL_VRF_SK}
  node_id: ${STAKE_POOL_ID}
bft:
  signing_key: ${LEADER_SK}
EOF

cat << EOF > config.yaml
storage: "${PWD}/jormungandr-storage-test/"

rest:
  listen: "${REST_DEST}"
  prefix: "${REST_PREFIX}"

peer_2_peer:
  trusted_peers: []
  public_address: "/ip4/${REST_HOST}/tcp/8299"
  topics_of_interests:
    messages: low
    blocks: normal
EOF

$CLI genesis encode --input genesis.yaml --output block-0.bin
if [ $? -ne 0 ]; then
    echo "error: building the genesis block"
    exit 1
fi

### PRINT

echo "faucet account: ${GREEN}${FAUCET_ADDR}${WHITE}"
echo "  * public: ${BLUE}${FAUCET_PK}${WHITE}"
echo "  * secret: ${RED}${FAUCET_SK}${WHITE}"
echo "  * amount: ${GREEN}${FAUCET_AMOUNT}${WHITE}"

echo "pool id: ${GREEN}${STAKE_POOL_ID}${WHITE}"

echo "To start the node:"
echo "  $NODE --genesis-block block-0.bin --config config.yaml --secret pool-secret1.yaml"
echo "To connect using CLI REST:"
echo "  $CLI rest v0 <CMD> --host \"http://${REST_DEST}/${REST_PREFIX}\""
echo "For example:"
echo "  $CLI rest v0 node stats -h \"http://${REST_HOST}:${REST_PORT}/${REST_PREFIX}\""
