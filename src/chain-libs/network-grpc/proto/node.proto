syntax = "proto3";

package iohk.chain.node;

message TipRequest {}

message TipResponse {
    bytes id = 1;
    string blockdate = 2;
}

// Parameters for GetBlocks and GetHeaders
message GetBlocksRequest {
    // The id of the tip to trace the chain from.
    bytes tip = 1;
    // The offset back in the chain to start block or header retrieval from,
    // going backwards in the chain.
    uint64 offset = 2;
    // Maximum number of blocks or headers to retrieve.
    uint64 size = 3;
}

message StreamBlocksToTipRequest {
    // The ids of alternative chain forks to start the blocks from.
    repeated bytes from = 1;
}

// Representation of a block.
message Block {
    // The entire content of the block. 
    bytes content = 1;
}

// Representation of a block header.
message Header {
    // The entire content of the block header. 
    bytes content = 1;
}

message ProposeTransactionsRequest {
    repeated bytes ids = 1;
}

message ProposeTransactionsResponse {
    // Status of each proposed transaction.
    enum Status {
        // The transaction ID is new to the recipient node.
        NEW = 0;
        // The proposed transaction has already been recorded by the node.
        ALREADY_EXISTS = 1;
    }

    message Item {
        bytes id = 1;
        Status status = 2;
    }

    repeated Item items = 1;
}

message RecordTransactionRequest {
    bytes tx = 1;
}

message RecordTransactionResponse {
    // The result of processing a transaction.
    enum Result {
        // The transaction has been accepted.
        ACCEPTED = 0;
        // Unknown/internal error.
        UNKNOWN_ERROR = 1;
        // The signature is invalid.
        INVALID_SIGNATURE = 2;
        // The proposed transaction would result in a double spend.
        DOUBLE_SPEND = 3;
        // The proposed transaction has already been recorded by the node.
        ALREADY_EXISTS = 4;
    }

    Result result = 1;
    bytes id = 2;
}

service Node {
    rpc Tip (TipRequest) returns (TipResponse);
    rpc GetBlocks (GetBlocksRequest) returns (stream Block) {
        option idempotency_level = NO_SIDE_EFFECTS;
    }
    rpc GetHeaders (GetBlocksRequest) returns (stream Header) {
        option idempotency_level = NO_SIDE_EFFECTS;
    }
    rpc StreamBlocksToTip (StreamBlocksToTipRequest) returns (stream Block);
    rpc ProposeTransactions (ProposeTransactionsRequest) returns (ProposeTransactionsResponse);
    rpc RecordTransaction (RecordTransactionRequest) returns (RecordTransactionResponse);
}
